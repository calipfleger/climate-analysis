"""
climate_analysis.py

A fully modular and reproducible NetCDF climate data processing & visualization tool.

Features:
- Automatically detects time format and units
- Fully configurable for comparing any climate datasets (RCPs, SSPs, CMIP models, observations)
- Automatic logging of execution time
- Ensemble averaging across members
- Regional time series analysis
- Linear trend mapping with 95% confidence intervals
- Regional analysis area highlighted on trend maps
- High-quality, reproducible visualization with figure captions

Author: [Your Name]
License: MIT
Last Updated: [Date]
"""

import os
import datetime
import numpy as np
import xarray as xr
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import scipy.stats as stats

# ====== CONFIGURATION SETTINGS ======
DATA_DIR = "data"  # Directory containing NetCDF files
SAVE_DIR = "output_figures"  # Directory to save figures
FILE_FORMAT = "png"  # Image format: png, jpg, svg, etc.
VARIABLES = ["temperature", "precipitation"]  # Variables to analyze
SCENARIOS = ["Model_A", "Model_B", "Model_C"]  # Different datasets to compare
REGION_BOUNDS = {"lat_min": -10, "lat_max": 10, "lon_min": 120, "lon_max": 150}  # Region for averaging
DEFAULT_CMAP = "coolwarm"  # Default colormap for visualizations

# ====== LOGGING TIME OF EXECUTION ======
print(f"üìÖ Script started at: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

# ====== FUNCTION DEFINITIONS ======

def load_netcdf(file_path: str):
    """Load a NetCDF dataset using xarray."""
    try:
        ds = xr.open_dataset(file_path)
        print(f"‚úÖ Successfully loaded {file_path}")
        print(ds)  # Print metadata for verification
        return ds
    except Exception as e:
        print(f"‚ùå Error loading file: {e}")
        return None

def detect_time_format(ds):
    """Detect the format of the time dimension in a dataset."""
    if "time" not in ds:
        print("‚ö†Ô∏è No time dimension found!")
        return None

    time_dim = ds["time"]
    
    # Extract time units
    time_units = time_dim.attrs.get("units", "Unknown")
    
    # Convert time to a readable format
    time_start = np.datetime_as_string(time_dim.min().values, unit="D")
    time_end = np.datetime_as_string(time_dim.max().values, unit="D")

    print(f"üìÜ Time detected: {time_start} to {time_end} ({time_units})")
    return time_start, time_end, time_units

def process_ensemble(ds, var_name: str):
    """Average all ensemble members, if available."""
    if "member" in ds.dims:
        ensemble_mean = ds[var_name].mean(dim="member")
        print(f"‚úÖ Averaged over ensemble members for: {var_name}")
    else:
        ensemble_mean = ds[var_name]
        print(f"‚ö†Ô∏è No ensemble members found, using raw data.")
    
    return ensemble_mean

def compute_regional_timeseries(ds, var_name: str):
    """Compute a regional mean time series."""
    regional_ds = ds.sel(
        lat=slice(REGION_BOUNDS["lat_min"], REGION_BOUNDS["lat_max"]),
        lon=slice(REGION_BOUNDS["lon_min"], REGION_BOUNDS["lon_max"])
    )
    
    regional_mean = regional_ds[var_name].mean(dim=["lat", "lon"])
    print(f"‚úÖ Computed regional mean time series for {var_name}")
    
    return regional_mean

def compute_linear_trend(ds, var_name: str):
    """Compute a linear trend and 95% confidence interval for a dataset."""
    time_values = ds["time"].values.astype(float)
    var_data = ds[var_name]

    slope = xr.apply_ufunc(
        lambda y: stats.linregress(time_values, y)[0], 
        var_data, 
        input_core_dims=[["time"]],
        vectorize=True
    )

    print(f"‚úÖ Computed linear trend for {var_name}")
    return slope

def plot_trend_with_region(trend, var_name: str, time_info, cmap: str = "RdBu_r"):
    """Plot the linear trend with the regional analysis box overlayed."""
    time_start, time_end, time_units = time_info

    fig, ax = plt.subplots(subplot_kw={"projection": ccrs.PlateCarree()})
    trend.plot(ax=ax, transform=ccrs.PlateCarree(), cmap=cmap, cbar_kwargs={'label': f"{var_name} Trend"})

    ax.coastlines()
    ax.add_feature(cfeature.BORDERS, linestyle=":")
    ax.add_feature(cfeature.LAND, facecolor="lightgray")
    ax.add_feature(cfeature.OCEAN, facecolor="lightblue")

    # Draw the regional analysis box
    ax.plot(
        [REGION_BOUNDS["lon_min"], REGION_BOUNDS["lon_max"], REGION_BOUNDS["lon_max"], REGION_BOUNDS["lon_min"], REGION_BOUNDS["lon_min"]],
        [REGION_BOUNDS["lat_min"], REGION_BOUNDS["lat_min"], REGION_BOUNDS["lat_max"], REGION_BOUNDS["lat_max"], REGION_BOUNDS["lat_min"]],
        color="red", linewidth=2, linestyle="--", transform=ccrs.PlateCarree(), label="Regional Avg Box"
    )
    ax.legend(loc="upper right")

    # Generate dynamic caption
    caption = f"{var_name} Linear Trend ({time_start} to {time_end}, {time_units}).\nRed box shows the regional average area."
    plt.figtext(0.5, -0.05, caption, wrap=True, horizontalalignment='center', fontsize=10)

    plt.title(f"Linear Trend of {var_name} with Regional Box")
    return fig

def save_figure(fig, var_name: str, dataset_name: str, file_type: str, save_dir: str = SAVE_DIR, file_format: str = FILE_FORMAT):
    """Save the generated plot as an image file."""
    os.makedirs(save_dir, exist_ok=True)
    file_name = f"{var_name}_{dataset_name}_{file_type}.{file_format}"
    file_path = os.path.join(save_dir, file_name)

    fig.savefig(file_path, dpi=300, bbox_inches="tight")
    print(f"üìÅ Figure saved: {file_path}")

# ====== MAIN EXECUTION ======

if __name__ == "__main__":
    for variable_name in VARIABLES:
        for dataset_name in SCENARIOS:
            file_path = os.path.join(DATA_DIR, f"{dataset_name}.nc")  

            dataset = load_netcdf(file_path)
            if dataset:
                time_info = detect_time_format(dataset)
                dataset = process_ensemble(dataset, variable_name)
                regional_ts = compute_regional_timeseries(dataset, variable_name)
                trend_map = compute_linear_trend(dataset, variable_name)

                fig_trend = plot_trend_with_region(trend_map, variable_name, time_info)
                if fig_trend:
                    save_figure(fig_trend, variable_name, dataset_name, "trend")

    print(f"‚úÖ All processing complete at: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
"""
climate_analysis.py

A fully modular and reproducible NetCDF climate data processing & visualization tool.

Author: [Your Name]
License: MIT
Last Updated: [Date]
"""

import os
import datetime
import numpy as np
import xarray as xr
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import scipy.stats as stats

# Configuration Settings
DATA_DIR = "../data"  # Adjust path as needed
SAVE_DIR = "../output_figures"
VARIABLES = ["temperature", "precipitation"]
SCENARIOS = ["Model_A", "Model_B", "Model_C"]

def load_netcdf(file_path: str):
    """Load a NetCDF dataset using xarray."""
    try:
        ds = xr.open_dataset(file_path)
        print(f"‚úÖ Loaded {file_path}")
        return ds
    except Exception as e:
        print(f"‚ùå Error loading file: {e}")
        return None

if __name__ == "__main__":
    print(f"üìÖ Script started at: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
